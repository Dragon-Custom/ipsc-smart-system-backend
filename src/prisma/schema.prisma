datasource db {
    url      = env("POSTGRE_CONNECTION_STRING")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

generator nexusPrisma {
    provider = "nexus-prisma"
}

model Shooter {
    id       Int       @id @unique @default(autoincrement())
    createAt DateTime? @default(now())
    name     String
    division Division
    stage    Stage[]
    score    Score[]
    email    String
}

enum StageType {
    Short
    Medium
    Long
    Unsanctioned
}

model Stage {
    id              Int          @id @unique @default(autoincrement())
    createAt        DateTime?    @default(now())
    image           Image        @relation(fields: [imageId], references: [id])
    name            String
    description     String?
    papers          Int
    poppers         Int
    noshoots        Int
    gunCondition    Int
    designer        Shooter      @relation(fields: [shooterId], references: [id])
    shooterId       Int
    //unit: minutes
    walkthroughTime Decimal
    Scorelist       Scorelist[]
    // the calculated field
    minRounds       Int          @default(dbgenerated("Remove this line from sql while migration"))
    // the calculated field
    maxScore        Int          @default(dbgenerated("Remove this line from sql while migration"))
    // the calculated field
    stageType       StageType    @default(dbgenerated("Remove this line from sql while migration"))
    imageId         String
    tags            TagOnStage[]
}

model StageTag {
    id         Int          @id @unique @default(autoincrement())
    title      String
    color      String
    TagOnStage TagOnStage[]
}

model TagOnStage {
    id      Int      @id @unique @default(autoincrement())
    tag     StageTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId   Int
    stage   Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId Int
    flag    Int?     @default(0)
}

model Scoreboard {
    id         Int         @id @unique @default(autoincrement())
    createAt   DateTime    @default(now())
    lastUpdate DateTime    @default(now()) @updatedAt
    name       String
    scorelists Scorelist[]
}

model Scorelist {
    id           Int         @id @unique @default(autoincrement())
    createAt     DateTime    @default(now())
    lastUpdate   DateTime    @default(now()) @updatedAt
    stage        Stage?      @relation(fields: [stageId], references: [id])
    scores       Score[]
    scoreboard   Scoreboard? @relation(fields: [scoreboardId], references: [id])
    scoreboardId Int?
    stageId      Int?
}

model Score {
    id          Int              @id @unique @default(autoincrement())
    shooter     Shooter          @relation(fields: [shooterId], references: [id])
    alphas      Int
    charlies    Int
    deltas      Int
    misses      Int
    noshoots    Int
    poppers     Int?
    time        Float
    proErrors   ProErrorsStore[]
    scorelist   Scorelist?       @relation(fields: [scorelistId], references: [id])
    scorelistId Int?
    shooterId   Int
    round       Int
}

model ProErrorObjects {
    id             Int              @id @unique @default(autoincrement())
    index          String           @unique
    title          String
    description    String
    proErrorsStore ProErrorsStore[]
}

model ProErrorsStore {
    id                Int             @id @unique @default(autoincrement())
    count             Int
    proError          ProErrorObjects @relation(fields: [proErrorObjectsId], references: [id])
    score             Score?          @relation(fields: [scoreId], references: [id])
    scoreId           Int?
    proErrorObjectsId Int
}

enum Division {
    Standard
    Open
    Production
    ProductionOptics
}

model Image {
    id        String  @id @unique @default(cuid())
    imagePath String
    Stage     Stage[]
}
