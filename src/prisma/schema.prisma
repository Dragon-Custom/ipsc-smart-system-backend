datasource db {
    url      = env("POSTGRE_CONNECTION_STRING")
    shadowDatabaseUrl = env("POSTGRE_DEV_CONNECTION_STRING")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

generator nexusPrisma {
    provider = "nexus-prisma"
}

enum Division {
    Standard
    Open
    Production
    ProductionOptics
}

model Shooter {
    id            Int       @id @unique @default(autoincrement())
    createAt      DateTime? @default(now())
    name          String
    division      Division
    designedStage Stage[]
    scores        Score[]
    email         String
    rankings      Ranking[]
    ratings       Rating[]
}

enum StageType {
    Short
    Medium
    Long
    Unsanctioned
}

model Stage {
    id              Int          @id @unique @default(autoincrement())
    createAt        DateTime?    @default(now())
    image           Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)
    name            String
    description     String?
    papers          Int
    poppers         Int
    noshoots        Int
    gunCondition    Int
    designer        Shooter      @relation(fields: [designerId], references: [id], onDelete: Cascade)
    designerId      Int
    //unit: minutes
    walkthroughTime Float
    scorelists      Scorelist[]
    // the calculated field
    minRounds       Int          @default(dbgenerated("Remove this line from sql while migration"))
    // the calculated field
    maxScore        Int          @default(dbgenerated("Remove this line from sql while migration"))
    // the calculated field
    stageType       StageType    @default(dbgenerated("Remove this line from sql while migration"))
    imageId         String
    tags            TagOnStage[]
}

model StageTag {
    id         Int          @id @unique @default(autoincrement())
    title      String
    color      String
    TagOnStage TagOnStage[]
}

model TagOnStage {
    id      Int      @id @unique @default(autoincrement())
    tag     StageTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId   Int
    stage   Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId Int
    flag    Int?     @default(0)
}

model Scoreboard {
    id         Int         @id @unique @default(autoincrement())
    createAt   DateTime    @default(now())
    lastUpdate DateTime    @default(now()) @updatedAt
    name       String
    scorelists Scorelist[]
}

model Scorelist {
    id           Int        @id @unique @default(autoincrement())
    createAt     DateTime   @default(now())
    lastUpdate   DateTime   @default(now()) @updatedAt
    stage        Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId      Int
    scores       Score[]
    scoreboard   Scoreboard @relation(fields: [scoreboardId], references: [id], onDelete: Cascade)
    scoreboardId Int
    rounds       Int        @default(0)
}

enum ScoreState {
    DidNotScore
    DidNotFinish
    DQ
    Scored
}

model Score {
    id            Int              @id @unique @default(autoincrement())
    createAt      DateTime         @default(now())
    shooter       Shooter          @relation(fields: [shooterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    alphas        Int              @default(0)
    charlies      Int              @default(0)
    deltas        Int              @default(0)
    misses        Int              @default(0)
    noshoots      Int              @default(0)
    poppers       Int              @default(0)
    time          Float            @default(0)
    proErrors     ProErrorsStore[]
    proErrorCount Int              @default(0)
    scorelist     Scorelist        @relation(fields: [scorelistId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    scorelistId   Int
    shooterId     Int
    score         Int              @default(dbgenerated("Remove this line from sql while migration"))
    hitFactor     Float            @default(dbgenerated("Remove this line from sql while migration"))
    state         ScoreState       @default(DidNotScore)
    dqReason      DqObject?        @relation(fields: [dqObjectId], references: [id])
    round         Int
    accuracy      Float?           @default(0)
    dqObjectId    Int?
}

model ProErrorObject {
    id             Int              @id @unique @default(autoincrement())
    index          String           @unique
    title          String
    description    String
    proErrorsStore ProErrorsStore[]
}

model ProErrorsStore {
    id               Int            @id @unique @default(autoincrement())
    count            Int
    proError         ProErrorObject @relation(fields: [proErrorObjectId], references: [id])
    score            Score          @relation(fields: [scoreId], references: [id], onDelete: Cascade)
    scoreId          Int
    proErrorObjectId Int
}

model DqObject {
    id          Int     @id @unique @default(autoincrement())
    index       String  @unique
    category    String
    title       String
    description String
    scores      Score[]
}

model Image {
    id        String  @id @unique @default(cuid())
    imagePath String
    stages     Stage[]
}

model Ranking {
    id        Int      @id @unique @default(autoincrement())
    shooter   Shooter  @relation(fields: [shooterId], references: [id], onDelete: Cascade)
    shooterId Int
    rank      Int
    updatedAt DateTime @default(now()) @updatedAt
    createAt  DateTime @default(now())
    tick      Int      //to indentify the time of update
}

model Rating {
    id        Int      @id @unique @default(autoincrement())
    shooter   Shooter  @relation(fields: [shooterId], references: [id], onDelete: Cascade)
    shooterId Int
    rating    Float
    updatedAt DateTime @default(now()) @updatedAt
    createAt  DateTime @default(now())
    tick      Int      //to indentify the time of update
}
